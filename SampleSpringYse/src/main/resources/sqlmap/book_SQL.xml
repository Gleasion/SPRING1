<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	마이바티스는 무엇인가?
	- 마이바티스는 개발자가 지정한 SQL, 저장 프로시저 그리고 몇 가지 고급 매핑을 지원하는 퍼스시턴스 프레임워크입니다.
	마이바티스는 JDBC로 처리하는 상당 부분의 코드와 파라미터 설정 및 결과 매핑을 대신해줍니다.
	마이바티스는 데이터베이스 레코드에 원시타입과 map 인터페이스 그리고 자바 POJO를 설정해서
	매핑하기 위해 XML과 어노테이션을 사용할 수 있습니다.
	
		*** POJO란?
		
			POJO(Plain Old Java Object)란, 순수한 자바 객체를 말한다.
			그리고, 객체지향적인 원리에 충실하면서, 환경과 기술에 종속되지 않고 필요에 따라 재활용 될 수 있는 방식으로 설계된 오브젝트
			객체지향원리를 기반으로 설계된 오브젝트(getter/setter를 이용한 VO들)
			
	namespace 항목은 쿼리가 여러개일 때 이름공간(namespace)을 분리하는 역할을 한다.
	쿼리 XML 파일은 보통 여러 개 생성되기 때문에 이를 구별하는 용도로 사용한다.
 -->

<mapper namespace="Book">
	
	<!-- 
		데이터 입력 SQL 쿼리 작성방법
		insert into 테이블명(컬럼1, 컬럼2) values (값1, 값2)
		
		id 항목은 namespace 안에서 쿼리를 구분하는 유일한 식별자 역할을 한다.
		paramterType은 쿼리에 적용할 파라미터 타입(현재 Map타입 사용)
		userGeneratedKeys와 keyProperty는 하나의 쌍으로 작성한다.
		userGeneratedKeys가 true로 설정되면 mybatis는 insert 쿼리 실행 후 생성된 pk를 파라미터 객체의
		keyProperty 속성에 넣어준다. (예제를 통해 dao에서 어떻게 넘어가는지까지 확인해보자)
		useGemenratedKeys : 시퀀스로 자동 증가된 번호 값을 가져올건지에 대한 여부 설정
		keyProperty : 여부 true 설정 시, 어떤 필드 값으로 받을 것인지 설정
		
		mybatis는 쿼리를 실행할 때 파라미터를 치환하는데 #{title}은 파라미터로 입력된 키를 값으로 치환한다.
		map.get("title") == "제목" 형태가 mybatis 쿼리 xml에 전달되면 mybatis는 #{title}을 "제목"으로
		자동 변환한다. #{title}, #{category}, #{price} >> {"제목", "카테고리", 1000} 이렇게 치환된다.
	 -->
	
	<!-- insert 할 때 useGeneratedKeys true로 사용 -->
	<insert id="insert" parameterType="hashMap" useGeneratedKeys="true">
		
		<!-- insert 쿼리문보다 먼저(order before) 실행하여 int 타입의 book_id 변수를 키로 사용하겠음 -->
		<selectKey keyProperty="book_id" resultType="int" order="BEFORE">
			select seq_book.nextval from dual
		</selectKey>
	
		insert into book(
			book_id, title, category, price
		) values (
			#{book_id}, #{title}, #{category}, #{price}
		)
	
	</insert>
	
	<!-- 
		데이터 조회 SQL 쿼리 작성방법
		select book_id, title, category, price from book
		where book_id = 1
		resultType은 select 쿼리가 실행된 후 반환값을 담을 컨테이너 타입을 말한다.
	 -->
	<select id="selectBook" parameterType="hashMap" resultType="hashMap">
		select
			book_id, title, category, price, insert_date
		from book
		where book_id = #{bookId}
	</select>
	
	<update id="update" parameterType="hashMap">
		update book
		set
			title = #{title},
			category = #{category},
			price = #{price}
		where book_id = #{bookId}
	</update>
	
	<delete id="delete" parameterType="hashMap">
		delete from book
		where book_id = #{bookId}
	</delete>
	
	<!-- 
		정렬 : oreder by
		작은 순서: asc
		큰 순서: desc
		
		where 1=1(항상 참) 관습적인 구문
		조건이 2개 이상일 경우
		처음에 시작하는 조건 : where 절로 시작
		두번째로 시작하는 조건 : and 절로 시작
		
		마이바티스
		- if문 : 조건
		- test문 : 조건 규칙
		- 키워드가 있는 경우, if문의 쿼리들이 동작
		- 이때 쿼리의 내용이 파라미터가 아니라 마이바티스 규칙에 의해서 변경되는 것을 동적 쿼리라고 한다.
		
		SQL 쿼리 조건에서 포함을 나타내는 구문은 like절
		- title like '검색어%' : 검색어로 시작
		- title like '%검색어' : 검색어로 끝
		- title like '%검색어%' : 검색어 포함
	 -->
	<select id="selectBookList" parameterType="hashMap" resultType="hashMap">
		select
			book_id, title, category, price, insert_date
		from book
		where 1=1
		<if test="keyword != null and keyword != ''">
			and
			(
				title like '%'||#{keyword}||'%' or
				category like '%'||#{keyword}||'%'
			)
		</if>
		order by insert_date desc
	</select>

</mapper>